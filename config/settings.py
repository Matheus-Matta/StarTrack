"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from decouple import config, Csv
from pathlib import Path
import dj_database_url
import os
from config.apps import APPS
from django.utils.translation import gettext_lazy as _

from dotenv import load_dotenv
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'chave-padrao-insegura')


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False') == 'True'

def _get_env_list(var_name: str) -> list[str]:
    """
    Retorna uma lista de strings a partir de uma variável de ambiente
    separada por vírgulas, removendo espaços em branco e itens vazios.
    """
    return [
        item.strip() 
        for item in os.getenv(var_name, "").split(",") 
        if item and item.strip()
    ]

# Hosts permitidos (do .env, separados por vírgula)
ALLOWED_HOSTS = _get_env_list("ALLOWED_HOSTS")

# Origem(s) que podem ser CORS / CSRF
_origins = _get_env_list("ALLOWED_HOSTS")

# Adiciona http e https para cada domínio
CORS_ALLOWED_ORIGINS = [
    f"{scheme}://{origin}"
    for origin in _origins
    for scheme in ("http", "https")
]

CSRF_TRUSTED_ORIGINS = CORS_ALLOWED_ORIGINS.copy()

INSTALLED_APPS = [
    'django.contrib.staticfiles',

    "unfold",                                # tema principal
    "unfold.contrib.filters",                # filtros avançados
    "unfold.contrib.forms",                  # campos/formulários especiais
    "unfold.contrib.inlines",                # inlines paginados/ordenáveis
    "unfold.contrib.import_export",          # integração django-import-export
    "unfold.contrib.guardian",               # se usar django-guardian
    "unfold.contrib.simple_history",  

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',

    'django_celery_results',
    "crispy_forms", 
    'channels',
    'simple_history',
    'auditlog', 
    'djangotables',
    'djangoselect',
    'compressor',     


] + APPS



MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'simple_history.middleware.HistoryRequestMiddleware',
    'config.middleware.SaoPauloTimezoneMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'djangonotify.context_processors.notifications_and_tasks',
                'django.template.context_processors.i18n'
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

if DEBUG:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': os.getenv('DB_ENGINE'),
            'NAME': os.getenv('DB_NAME'),
            'USER': os.getenv('DB_USER'),
            'PASSWORD': os.getenv('DB_PASSWORD'),
            'HOST': os.getenv('DB_HOST'),
            'PORT': os.getenv('DB_PORT'),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

LANGUAGES = [
    ('pt-br', _('Português')),
    ('en',    _('English')),
]

LOCALE_PATHS = [ BASE_DIR / 'locale' ]

USE_TZ = False

USE_L10N = True 

DATE_FORMAT      = 'd/m/Y'
SHORT_DATE_FORMAT = 'd/m/Y'
DATETIME_FORMAT  = 'd/m/Y H:i:s'
TIME_FORMAT      = 'H:i:s'


CRISPY_ALLOWED_TEMPLATE_PACKS = ["unfold_crispy"]
CRISPY_TEMPLATE_PACK        = "unfold_crispy"

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

BASE_DIR = Path(__file__).resolve().parent.parent

STATIC_URL = '/static/'
STATIC_ROOT = "/home/app/web/staticfiles"

STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

STATIC_ROOT = BASE_DIR / 'staticfiles'  # Usado em produção (ex: com collectstatic)
STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'

STATICFILES_FINDERS = [
    # procura em STATICFILES_DIRS
    'django.contrib.staticfiles.finders.FileSystemFinder',
    # procura em cada app/<app>/static/
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    # somente se você realmente usar django-compressor
    'compressor.finders.CompressorFinder',
]

COMPRESS_ROOT = BASE_DIR / 'static'

COMPRESS_ENABLED = True

# Static files ( upload image )
MEDIA_URL = '/media/'
MEDIA_ROOT  = "/home/app/web/mediafiles"


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field


# motificando as tags do messeger para usar no bootstrap
from django.contrib.messages import constants as messages

MESSAGE_TAGS = {
    messages.DEBUG: 'secondary',
    messages.INFO: 'info',
    messages.SUCCESS: 'success',
    messages.WARNING: 'warning',
    messages.ERROR: 'danger',
}

# url de encaminhamento caso nao esteja logado
LOGIN_URL = 'authapp:login'
LOGOUT_REDIRECT_URL = 'authapp:login'
LOGIN_REDIRECT_URL = '/'

# Configurações básicas de email (exemplo usando Gmail)
#EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend' # produção
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' # teste
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'seuemail@gmail.com'
EMAIL_HOST_PASSWORD = 'sua_senha_de_app'  # use senha de app, não a principal
DEFAULT_FROM_EMAIL = '[empresa] <seuemail@gmail.com>'

REDIS_URL = os.getenv('REDIS_URL', 'redis://127.0.0.1:6379/0')

# Celery Broker (Redis é o melhor para agora)
CELERY_BROKER_URL = REDIS_URL
CELERY_RESULT_BACKEND = 'django-db'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_TASK_TRACK_STARTED = True

# Opcional: parâmetros de transporte (timeouts, retries)
CELERY_BROKER_TRANSPORT_OPTIONS = {
    'visibility_timeout': 3600,   # 1h para tasks não confirmadas
    'retry_on_timeout': True,
    'socket_timeout': 1,
    'max_retries': 3,
    'interval_start': 0,
    'interval_step': 0.2,
    'interval_max': 0.5,
}


ASGI_APPLICATION = "config.asgi.application"

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [REDIS_URL],
        },
    },
}

from config.unfold.sidebar import SIDEBAR
UNFOLD = SIDEBAR